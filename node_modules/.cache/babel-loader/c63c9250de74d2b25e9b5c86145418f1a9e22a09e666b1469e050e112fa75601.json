{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  value: 0\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\n\nexport const counterSlice = createSlice({\n  name: \"counter\",\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    }\n  }\n});\nexport default counterSlice.reducer;\nexport const {\n  inc\n} = todoSlice.actions;\nexport const {\n  increment,\n  decrement,\n  incrementByAmount\n} = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = state => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = amount => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\nexport default counterSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","value","counterSlice","name","reducers","increment","state","decrement","reducer","inc","todoSlice","actions","incrementByAmount","selectCount","counter","incrementIfOdd","amount","dispatch","getState","currentValue"],"sources":["C:/Users/BZM/Desktop/Fayek/XALIAN-RTK/src/features/counter/counterSlice.ts"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\"\r\n\r\nexport interface CounterState {\r\n  value: number\r\n}\r\n\r\nconst initialState: CounterState = {\r\n  value: 0,\r\n}\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched. Thunks are\r\n// typically used to make async requests.\r\n\r\nexport const counterSlice = createSlice({\r\n  name: \"counter\",\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    increment: (state) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1\r\n    },\r\n    decrement: (state) => {\r\n      state.value -= 1\r\n    },\r\n  },\r\n})\r\n\r\nexport default counterSlice.reducer\r\nexport const {\r\n inc\r\n} = todoSlice.actions\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectCount = (state: RootState) => state.counter.value\r\n\r\n// We can also write thunks by hand, which may contain both sync and async logic.\r\n// Here's an example of conditionally dispatching actions based on current state.\r\nexport const incrementIfOdd =\r\n  (amount: number): AppThunk =>\r\n  (dispatch, getState) => {\r\n    const currentValue = selectCount(getState())\r\n    if (currentValue % 2 === 1) {\r\n      dispatch(incrementByAmount(amount))\r\n    }\r\n  }\r\n\r\nexport default counterSlice.reducer\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAM9C,MAAMC,YAA0B,GAAG;EACjCC,KAAK,EAAE;AACT,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,YAAY,GAAGH,WAAW,CAAC;EACtCI,IAAI,EAAE,SAAS;EACfH,YAAY;EACZ;EACAI,QAAQ,EAAE;IACRC,SAAS,EAAGC,KAAK,IAAK;MACpB;MACA;MACA;MACA;MACAA,KAAK,CAACL,KAAK,IAAI,CAAC;IAClB,CAAC;IACDM,SAAS,EAAGD,KAAK,IAAK;MACpBA,KAAK,CAACL,KAAK,IAAI,CAAC;IAClB;EACF;AACF,CAAC,CAAC;AAEF,eAAeC,YAAY,CAACM,OAAO;AACnC,OAAO,MAAM;EACZC;AACD,CAAC,GAAGC,SAAS,CAACC,OAAO;AACrB,OAAO,MAAM;EAAEN,SAAS;EAAEE,SAAS;EAAEK;AAAkB,CAAC,GAAGV,YAAY,CAACS,OAAO;;AAE/E;AACA;AACA;AACA,OAAO,MAAME,WAAW,GAAIP,KAAgB,IAAKA,KAAK,CAACQ,OAAO,CAACb,KAAK;;AAEpE;AACA;AACA,OAAO,MAAMc,cAAc,GACxBC,MAAc,IACf,CAACC,QAAQ,EAAEC,QAAQ,KAAK;EACtB,MAAMC,YAAY,GAAGN,WAAW,CAACK,QAAQ,EAAE,CAAC;EAC5C,IAAIC,YAAY,GAAG,CAAC,KAAK,CAAC,EAAE;IAC1BF,QAAQ,CAACL,iBAAiB,CAACI,MAAM,CAAC,CAAC;EACrC;AACF,CAAC;AAEH,eAAed,YAAY,CAACM,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}